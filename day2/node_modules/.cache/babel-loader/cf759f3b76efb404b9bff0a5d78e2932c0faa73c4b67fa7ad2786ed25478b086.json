{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SARATH S\\\\Desktop\\\\test\\\\daytwo\\\\src\\\\Test3.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Test3() {\n  _s();\n  const [count, setCount] = useState(0);\n  const prevCountRef = useRef(); // Create a reference to store the previous count\n\n  useEffect(() => {\n    prevCountRef.current = count; // Update the ref with the latest count value\n  }, [count]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"50px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Current Count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Previous Count: \", prevCountRef.current]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      style: {\n        padding: \"5px 10px\"\n      },\n      children: \"Increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n_s(Test3, \"ASxKwvowIOcjCsM7q0Ue0R+dvXc=\");\n_c = Test3;\nvar _c;\n$RefreshReg$(_c, \"Test3\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Test3","_s","count","setCount","prevCountRef","current","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","padding","_c","$RefreshReg$"],"sources":["C:/Users/SARATH S/Desktop/test/daytwo/src/Test3.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nexport default function Test3() {\r\n  const [count, setCount] = useState(0);\r\n  const prevCountRef = useRef(); // Create a reference to store the previous count\r\n\r\n  useEffect(() => {\r\n    prevCountRef.current = count; // Update the ref with the latest count value\r\n  }, [count]);\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\r\n      <h2>Current Count: {count}</h2>\r\n      <h3>Previous Count: {prevCountRef.current}</h3>\r\n      <button onClick={() => setCount(count + 1)} style={{ padding: \"5px 10px\" }}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMS,YAAY,GAAGP,MAAM,CAAC,CAAC,CAAC,CAAC;;EAE/BD,SAAS,CAAC,MAAM;IACdQ,YAAY,CAACC,OAAO,GAAGH,KAAK,CAAC,CAAC;EAChC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACEH,OAAA;IAAKO,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACrDV,OAAA;MAAAU,QAAA,GAAI,iBAAe,EAACP,KAAK;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/Bd,OAAA;MAAAU,QAAA,GAAI,kBAAgB,EAACL,YAAY,CAACC,OAAO;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/Cd,OAAA;MAAQe,OAAO,EAAEA,CAAA,KAAMX,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAE;MAACI,KAAK,EAAE;QAAES,OAAO,EAAE;MAAW,CAAE;MAAAN,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3F,CAAC;AAEV;AAACZ,EAAA,CAfuBD,KAAK;AAAAgB,EAAA,GAALhB,KAAK;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}